{"home":{"title":"saber2pr","logo":"https://github.com/Saber2pr/MyWeb/raw/master/resource/saber2pr.jpg","author":"I am saber2pr","readME":"the webpage is based on React","websites":[{"name":"github","href":"https://github.com/Saber2pr"},{"name":"csdn","href":"https://blog.csdn.net/u011607490"},{"name":"bilibili","href":"https://space.bilibili.com/71959910/#/"},{"name":"zhihu","href":"https://www.zhihu.com/people/li-li-23-53-81/activities"}]},"blog":{"items":[{"name":"highlight","content":"这个模块主要负责代码块的关键字高亮处理。\n首先定义接口：\n```ts\n// 关键字和对应颜色\nexport type ColorWord = {\n  word: string\n  color: string\n}\n\n// 关键字数组\nexport type KeyWords = ColorWord[]\n\n// HighLight元素接口\nexport interface HighLight extends Props<any> {\n  content: string\n  keywords: KeyWords\n}\n```\n在此之前，先解决一个问题：\n给定一个文本字符串和一个字符串数组，找出数组中每个元素在文本中的位置。\n如果是找一个单词在文本中的位置很容易想到：\n```ts\nlet pos = str.indexOf(key, start)\n```\n但是这有个问题，indexOf只是找到了key第一次出现的位置，如果后面还有key呢？\n所以需要这样：\n```ts\nlet pos = str.indexOf(key, start)\nwhile (pos !== -1) {\n  record.push({ type: key, index: pos })\n  pos = str.indexOf(key, pos + key.length)\n}\n```\n找到key后，以key结尾作为起点开始查找key下一次出现的位置，并将结果全部保存至record数组。\n所以对于数组：\n```ts\nexport const findKeys = (content: string, keys: string[]) => {\n  const record: {\n    type: string\n    index: number\n  }[] = []\n  keys.forEach(key => {\n    let pos = content.indexOf(key, 0)\n    while (pos !== -1) {\n      record.push({ type: key, index: pos })\n      pos = content.indexOf(key, pos + key.length)\n    }\n  })\n  return record.sort((a, b) => a.index - b.index)\n}\n```\n拿到了关键字所在位置后，对其根据位置进行sort排序。\n对于数组，可以将其转换为正则表达式：\n```ts\nnew RegExp(keywords.map(keyword => keyword.word).join('|'))\n```\n然后根据正则来分割字符串并进行reduce处理：\n```ts\nconst array = content\n  .split(new RegExp(keywords.map(keyword => keyword.word).join('|')))\n  .reduce<JSX.Element[]>(\n    (out, val, index) =>\n      finded[index]\n        ? out.concat(\n            <span key={`jssjy4fpsfemmey5tor${index}`}>{val}</span>,\n            <span\n              style={{ color: findColor(index) }}\n              key={`jssjyad2o7ym9vuerr${index}`}\n            >\n              {finded[index].type}\n            </span>\n          )\n        : out.concat(<span key={`jssjyjafaimd4jkph76${index}`}>{val}</span>),\n    []\n  )\n```\n得到的就是加上高亮color的Jsx.Element数组。","type":"工具模块","lastEdit":"2019/3/3 下午10:01:26"},{"name":"2019-3-3 | 随便写点东西。。。","content":"    转眼间己经大三了，时间过得真滴快呀。第一次加入github在2018年6月份，刚好暑假前夕。当时在学校参加了一个ai项目的培训（水中机器人控制。。其实也不算很高级的东西。）。\n    项目的负责人（学长）要求每个人安装vs在电脑上，他说项目的代码语言（c++）我们应该学过，所以不会讲太多基础知识，直接讲框架部分（ps：我是机械专业）。\n    我折腾了半天vs环境配置，最后还是有点问题。。。\n    培训后期会进行筛选，通过的人要交100多元费用。最后当然我没去，原因是没钱。。。也担心比赛拿不了奖。事后我感觉还是挺后悔的，电脑上的vs也没舍得卸载。\n    放暑假了，没事做，于是在网上找了几个c++的框架开始学，一个cocos2dx一个qt,还有一个opencv。我先从cocos开始，做了一个安卓小游戏，当时成就感那叫一个高。过程中遇到了无数恶心的bug，靠网上各种搜索解决了。最后对c++这门语言及其厌恶。\n    后来又转向了cocos2d-js，打开了新世界的大门，原来代码还可以写的这么随意！接着接触了cocos creator，并学习到了对我编程学习生涯中影响最为重要的一门语言---typescript。javascript一开使给我带来的是无限的自由，不用再写指针，不用在为空指针异常而烦恼，然而后来发现这门语言有一个致命缺点，它的弱类型将导致后期巨量的代码无法一键重构，这一点上c++还是挺好的。后来接触了typescript，改变了这一切，它既有动态语言的随意，又有静态语言的严谨。\n    暑假开学后，我开始向web前端进击，接触了vue框架，后来相继接触react和angular，最终选择react作为主攻方向，如你所见，现在这个页面就是基于react框架开发的单页面应用。虽然现在它还是个静态页面，但是它包含了数据缓存和处理部分，只要有服务器托管就能跑起来。","type":"随笔","lastEdit":"2019/3/3 下午9:32:04"},{"name":"style","type":"工具模块","content":"它使用起来会是这样的：\n```ts\nstyle(document.querySelector('body'))({ color: 'blue' })\n```\n即:\n```ts\nstyle(HtmlElement)(CSSProps)\n```\n采用了柯理化的高阶函数来设计，实现如下：\n```ts\nimport { CSSProperties } from 'react'\n\nexport const style = <T>(target: T) => (style: CSSProperties): T => {\n  Object.keys(style).forEach(key => (target['style'][key] = style[key]))\n  return target\n}\n```\n使用Object.keys来获取CSSProps的键数组，然后遍历每个key并取其键值赋给HtmlElement的style中对应的属性。说白了就是合并style到HtmlElement.style中，所以也可以尝试使用Object.assgin。","lastEdit":"2019/2/28 下午11:21:36"},{"name":"架构","type":"本项目","content":"本项目采用了Observable(观察者)模式来架构：\n1. main.tsx\n```ts\nStore$.subscribe(state =>\n  ReactDOM.render(\n    <Application state={state} />,\n    document.querySelector('body')\n  )\n)\n```\nStore$是一个可观测对象(Observable)，当Store$中所记录的状态(state)发生变化时会将新的状态推送(dispatch)至Observers。\n状态的改变将由组成Application的子组件发起。\n例如：\n2. blog_tab.tsx\n```ts\nconst out = index =>\n  Store$.pipe(\n    blog_tab_index(index),\n    blog_content_state('out')\n  )\n\nexport const TabContent = ({ state, style }: Tabs) => {\n  const { items, tabCur } = state\n  const tabs = Array.from(new Set(items.map(v => v.type))).map((t, index) => (\n    <Tab name={t} key={index}>\n      <Content\n        state={{\n          ...state,\n          items: find(items, v => v.type === t)\n        }}\n        style={style}\n        key={index}\n      />\n    </Tab>\n  ))\n  return (\n    <TabV\n      col={'25% 75%'}\n      active={tabVcss.active}\n      unactive={tabVcss.unactive}\n      current={tabCur}\n      onClick={out}\n    >\n      {tabs}\n    </TabV>\n  )\n}\n```\n用户点击tab后会调用out函数。out函数在Store$管道(pipe)中使用操作符(operation)对state进行了处理，这个行为会被observers所感知。例如上面的mian文件中，该observer在收到新的状态后会将其送入ReactDOM.render中，由React的diff算法进行高效的更新dom内容。","lastEdit":"2019/2/28 下午11:20:57"}],"blogState":"view","contentState":"enter","tabCur":0,"contentCur":0},"project":[{"name":"2048","href":"https://saber2pr.github.io/MyWeb/build/2048/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/2048.jpg","infor":"a webgame."},{"name":"EdgeJudge","href":"https://saber2pr.github.io/MyWeb/build/EdgeJudge/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/edgejudge.jpg","infor":"a Collision test."},{"name":"ccc-bullet","href":"https://saber2pr.github.io/MyWeb/build/ccc-bullet/build/web-mobile/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/ccc-bullet.jpg","infor":"a shootGame demo."},{"name":"colliBar","href":"https://saber2pr.github.io/MyWeb/build/collisionBar/build/web-mobile/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/colliBar.jpg","infor":"a PhysCollision test"},{"name":"HouseBlocks","href":"https://saber2pr.github.io/HouseBlocks/HouseBlocks_CocosCreator/build/web-mobile0.1/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/newHouseBlocks.jpg","infor":"a webgame."},{"name":"csvTochat","href":"https://saber2pr.github.io/csvToChart/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/csvToChartView.jpg","infor":"a webTool for excel."},{"name":"CameraIdea","href":"https://saber2pr.github.io/CocosCreatorExam/CameraIdea/build/web-mobile/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/camera.gif","infor":"a cocoscreator demo."},{"name":"RandPlat","href":"https://saber2pr.github.io/CocosCreatorExam/RandPlat/build/web-mobile/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/RandPlat.jpg","infor":"a rand-gift test."},{"name":"ComputerBattle","href":"https://saber2pr.github.io/ComputerBattle/build/web-mobile/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/CompView.gif","infor":"a webgame."},{"name":"imageToCode","href":"https://github.com/Saber2pr/openCvImageTransformer","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/badapple.jpg","infor":"an opencv-demo."},{"name":"XmJUMP","href":"https://github.com/Saber2pr/XM_JUMP","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/XM_JUMP.jpg","infor":"cocos2dx demo."},{"name":"2DJumpPlatForm","href":"https://saber2pr.github.io/MyWeb/build/PhysAct/build/web-mobile/","src":"https://github.com/Saber2pr/MyWeb/raw/master/resource/2DJumpPlatForm.png","infor":"a webgame."}],"about":{"title":"说明","content":"这是一个用来组织和导航saber2pr/Repositories的页面，由json数据渲染而成。使用react（16.8.2）编写，配色风格参考Dracula Official。语言为React-Typescript（tsx），层叠样式表为css in js，栅格布局为grid格式。采用函数组件，状态更新使用React-Hooks，状态管理使用Observable订阅观察。tab导航原理为props.children动态渲染，a标签hover原理为onMouseOver & onMouseOut动态切换css阴影，input搜索原理为正则match & children动态渲染，列表折叠原理为数组slice & children动态渲染，代码插入利用pre标签和scroll样式(overflow:hidden)，关键字高亮利用正则匹配和字符串split & map 处理(详见utils/highlight)。使用json接口，json对象序列化并post到server端持久化，server端使用nodejs-http模块搭建。前端页面默认使用样例假数据。 项目的单元工具（utils）已经同步到npm。","more":"更多信息请移步github.com/Saber2pr/saber2pr.github.io。","contact":"联系","links":[{"name":"saber2pr@gmail.com","href":"https://saber2pr@gmail.com"},{"name":"1029985799@qq.com","href":"https://1029985799@qq.com"}]},"staticState":{"footer":"saber2pr.github.io"},"tabCur":1,"login":true}